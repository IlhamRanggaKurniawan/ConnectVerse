// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  email         String          @unique
  password      String
  role          String          @default("member")
  content       Content[]
  likeContent   LikeContent[]
  saveContent   SaveContent[]
  comment       Comment[]
  followers     Follow[]        @relation("followersRelation")
  following     Follow[]        @relation("followingRelation")
  Notification  Notification[]
  createdAt     DateTime        @default(now())
  GroupChat     GroupChat[]
  DirectMessage DirectMessage[]
  Message       Message[]
}

model Content {
  id          Int           @id @default(autoincrement())
  uploaderId  Int
  uploader    User          @relation(fields: [uploaderId], references: [id])
  caption     String
  url         String        @unique
  likeContent LikeContent[]
  Save        SaveContent[]
  comment     Comment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("followersRelation", fields: [followerId], references: [id])
  following   User     @relation("followingRelation", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model LikeContent {
  id        Int      @id @default(autoincrement())
  userId    Int
  contentId Int
  user      User     @relation(fields: [userId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, contentId])
}

model SaveContent {
  id        Int      @id @default(autoincrement())
  userId    Int
  contentId Int
  user      User     @relation(fields: [userId], references: [id])
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, contentId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  contentId Int
  userId    Int
  content   Content  @relation(fields: [contentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentId, userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model DirectMessage {
  id           Int       @id @default(autoincrement())
  participants User[]
  message      Message[]
  createdAt    DateTime  @default(now())

}

model GroupChat {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  member    User[]
  message   Message[]
  createdAt DateTime  @default(now())
}

model Message {
  id              Int            @id @default(autoincrement())
  message         String
  senderId        Int
  sender          User           @relation(fields: [senderId], references: [id])
  directMessageId Int?
  DirectMessage   DirectMessage? @relation(fields: [directMessageId], references: [id])
  groupChatId     Int?
  GroupChat       GroupChat?     @relation(fields: [groupChatId], references: [id])
  isRead          Boolean        @default(false)
  createdAt       DateTime       @default(now())
}
